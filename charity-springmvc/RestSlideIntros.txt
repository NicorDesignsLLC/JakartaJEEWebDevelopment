Understanding REST Web Services
Introduction to REST Web Services: Explore how third-party clients interact with Spring Web MVC services for business logic, data retrieval, and persistence, focusing on service provision and implementation.
Modern Context: Understand the relevance of REST in the age of mobile and IoT, enabling real-time interactions via client-side JavaScript.
Goal: Learn how REST web services facilitate seamless, distributed system integration across diverse platforms for building robust applications.

REST Web Services Overview
Definition: REST is an architectural style for designing stateless, client-server applications using HTTP.
Key Characteristics: Stateless, client-server, cacheable, uniform interface, layered system.
History: Introduced by Roy Fielding in 2000, REST grew with the web’s expansion and is now widely used for APIs. 
Advantages: Scalable, flexible, simple, and performance-optimized.
Use Cases: Web APIs, microservices, cloud services, third-party integrations.

REST Web Services Overview
Definition: REST is an architectural style for designing stateless, client-server applications using HTTP.
Key Characteristics: Stateless, client-server, cacheable, uniform interface, layered system.
History: Introduced by Roy Fielding in 2000, REST grew with the web’s expansion and is now widely used for APIs.
Advantages: Scalable, flexible, simple, and performance-optimized.
Use Cases: Web APIs, microservices, cloud services, third-party integrations.


REST Provides a Simpler Approach
REST Overview: REST offers a simpler alternative to SOAP with flexible data formats (JSON, XML, plain text) and uses standard HTTP methods for CRUD operations (POST, GET, PUT, DELETE).
Key Differences: REST does not require predefined resource formats and uses HTTP protocols directly, making it more adaptable.
HTTP Status Codes & MIME Types: REST uses HTTP status codes and MIME types to manage requests and responses, providing clear communication and flexibility.
Discoverability: REST's discoverability via HATEOAS supports dynamic client interactions, enhancing flexibility in agile and cloud-based environments.


Configuring REST using Spring MVC
Overview: Learn how to extend your existing Charity Registration Application to include RESTful web services using Spring MVC.
Key Steps:
Separate DispatcherServlet: Set up a dedicated DispatcherServlet for REST controllers to keep web UI and REST components distinct.
Segregate Controllers: Maintain separate contexts for web and REST controllers for cleaner architecture.
Develop REST Controllers: Implement REST controllers that handle JSON and XML requests.
Error Handling: Incorporate proper error handling for robust REST services.

Segregating Controllers with Stereotype Annotations
Overview: Learn how to separate REST and web controllers in Spring MVC using stereotype annotations and package organization.
Key Strategies:
Use Different Package Names: Organize web and REST controllers into separate packages to avoid DispatcherServlet overlap.
Spring Meta Annotations: Create custom annotations for web (@WebController) and REST (@RestApiController) controllers for cleaner segregation.
Configuration: Set up separate WebServletContextConfiguration and RestServletContextConfiguration for optimized, context-specific settings.

Handling Error Conditions in REST Web Services
Overview: Learn how to provide meaningful error responses in Spring REST services using modern error handling techniques.
Key Techniques:
Changing HTTP Response Codes: Use @ResponseStatus and @ExceptionHandler to return appropriate HTTP status codes like 404 for not found or 500 for server errors.
Global Exception Handling: Use @ControllerAdvice for centralized exception handling across multiple controllers.
Custom REST Annotations: Create custom annotations to standardize and simplify controller configurations while handling errors efficiently.


Improving Discoverability with an Index Endpoint
Overview: Learn how to enhance your Charity Registration API’s discoverability by creating an index endpoint that lists all available API endpoints with brief descriptions.
Key Benefits:
Improved Discoverability: Provides a centralized overview of available API operations.
Self-Documentation: Acts as live, self-updating documentation for developers.
Ease of Use: Simplifies understanding and integration of the API.
Support for Versioning: Easily adaptable for API versioning with version details included.

Testing REST Endpoints
Overview: Learn how to test REST endpoints in your Charity Registration application to ensure reliability and proper error handling.
Key Tools:
Postman: Ideal for manual testing and debugging with a user-friendly interface.
cURL: Command-line tool for quick, scriptable HTTP requests.
JUnit with Spring Boot Test: Automated testing for REST endpoints within the Spring context.
REST Assured: Java library for simplified, maintainable API testing.
Making Requests: Test your endpoints by sending HTTP requests and verifying the responses, ensuring functionality and proper status codes.


